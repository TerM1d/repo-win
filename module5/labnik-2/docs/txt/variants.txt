ВАРИАНТЫ ЗАДАНИЙ для лабораторных работ №6-11.
 
1. Поиск указанной строки в указанном файле. Обработка одной строки в порожденном процессе.

2. Умножение матрицы на вектор. Обработка одной строки матрицы - в порожденном процессе.

3. Поиск всех простых чисел (простым называется число, которое является своим наибольшим делителем) в указанном интервале чисел, разделенном на несколько диапазонов. Обработка каждого диапазона производится в порожденном процессе. Классический алгоритм Евклида определения наибольшего общего делителя двух целых чисел (x, y) может применяться при следующих условиях:
оба числа x и y неотрицательные;
оба числа x и y отличны от нуля.
На каждом шаге алгоритма выполняются сравнения:
если x == y, то ответ найден;
если x < y, то y заменяется значением  y - x;
если x > y, то x заменяется значением  x — y.

4. Warcraft. Заданное количество юнитов добывают золото равными порциями из одной шахты, задерживаясь в пути на случайное время, до ее истощения. Работа каждого юнита реализуется в порожденном процессе.

5. Винни-Пух и пчелы. Заданное количество пчел добывают мед равными порциями, задерживаясь в пути на случайное время. Винни-Пух потребляет мед порциями заданной величины за заданное время и столько же времени может прожить без питания. Работа каждой пчелы реализуется в порожденном процессе.

6. Шарики. Координаты заданного количества шариков изменяются на случайную величину по вертикали и горизонтали. При выпадении шарика за нижнюю границу допустимой области шарик исчезает. Изменение координат каждого шарика в отдельном процессе (потоке).

7. Противостояние нескольких команд. Каждая команда увеличивается на случайное количество бойцов и убивает случайное количество бойцов участника. Борьба каждой команды реализуется в отдельном процессе.

8. Статистический анализ. Имеется несколько массивов данных (разного размера). Требуется определить математическое ожидание в каждом массиве. Обработка каждого массива выполняется в отдельном процессе.

9. Контрольная сумма. Для нескольких файлов (разного размера) требуется вычислить контрольную сумму (сумму кодов всех символов файла). Обработка каждого файла выполняется в отдельном процессе.

10. Авиаразведка. Создается условная карта в виде матрицы, размерность которой определяет размер карты, содержащей произвольное количество единиц (целей) в произвольных ячейках. Из произвольной точки карты стартуют несколько разведчиков (процессов), курсы которых выбираются так, чтобы покрыть максимальную площадь карты. Каждый разведчик фиксирует цели, чьи координаты совпадают с его координатами и по достижении границ карты сообщает количество обнаруженных целей.

11. Пошаговая игра. Создается игровое поле в виде матрицы, размерность которой определяет размер поля, содержащей в произвольном соотношении нули, отрицательные (например,-1) и положительные (например, 1) значения. Из произвольных точек поля стартуют несколько игроков (процессов), имеющих одну жизнь, движение которых направлено на произвольный конец поля. Каждый игрок, перемещаясь на соседнюю ячейку, читает ее содержимое, записывает вместо него ноль и добавляет содержимое ячейки к своему количеству жизней. Если количество жизней равно нулю, то игрок погибает. Если ячейка занята другим игроком, происходит бой, в котором побеждает игрок с бо̀льшим количеством жизней.
12. Пошаговая игра без боев между игроками. Аналогична предыдущему варианту, но игроки, встретившиеся на одной ячейке, выводят сообщения, сумма жизней меняется у того, кто занял ячейку первым. Игрок, пройдя игровое поле, выводит свой результат.

13. Голодные игры. Родительский процесс создает указанное количество дочерних, фиксируя их идентификаторы (например, в файле). Каждый дочерний процесс удаляет из списка произвольный идентификатор, если он не равен его собственному и отправляет системный запрос на уничтожение другого процесса, чей идентификатор он выбрал. Игра прекращается. когда останется один участник, родительский процесс сообщает идентификатор победителя.

14. Бригадный подряд. Родительский процесс создает заданное количество дочерних (условных рабочих), которые выкладывают на конвейер (в файл, глобальный массив) деталь (например, свой идентификатор) если на нем есть место. После запуска рабочих, запускается дочерний процесс-контролер, который снимает с конвейера деталь для проверки (есть ли такой идентификатор в списке процессов). Если рабочий не может выложить деталь за число тактов, равное числу рабочих (нет места на конвейере), он прерывает работу с жалобой на контролера. Если контролер не может взять с конвейера ни одной детали, он прерывает работу с жалобой на бригаду.
