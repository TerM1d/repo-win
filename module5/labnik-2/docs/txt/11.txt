ЛАБОРАТОРНАЯ РАБОТА №11
СЕТЕВОЕ ПРОГРАММИРОВАНИЕ В LINUX

1. ЦЕЛЬ РАБОТЫ: 
Изучить способы и средства сетевого взаимодействия процессов средствами языка C в операционных системах семейства Linux.

2. КРАТКИЕ ТЕОРЕТИЧЕСКИЕ СВЕДЕНИЯ.
Сокеты (sockets) представляют собой высокоуровневый унифицированный интерфейс взаимодействия с телекоммуникационными протоколами.
В Unix дескрипторы сокетов реализованы так же, как дескрипторы файлов.
В действительности большинство функций, работающих с дескрипторами файлов, таких как read или write, будут работать и с дескрипторами сокетов.
Перед использованием сокетов в программе необходимо подключить библиотеки.
В Unix нет необходимости проводить инициализацию и деинициализацию библиотеки для работы с сокетами, как это было в Windows.
Поэтому библиотеку достаточно просто подключить директивой include. 
Рассмотрим подробнее библиотеки, необходимые для написания клиент-серверного приложения для операционных систем семейства Unix:
sys/types.h - содержит определения системных типов данных, которые используются в следующих двух заголовочных файлах;
sys/socket.h - содержит определения структур, необходимых для работы с сокетами;
netinet/in.h - содержит константы и структуры, необходимые для пространства адресов интернета;
В программе сокет идентифицируется дескриптором - это просто переменная типа int. 
Программа получает дескриптор от операционной системы при создании сокета, а затем передаёт его сервисам socket API для указания сокета, над которым необходимо выполнить то или иное действие.
	int socket(int domain, int type, int protocol);
Функция создания сокета принципиально ничем не отличается от ее аналога в Windows. 
Домен определяет пространство адресов, в котором располагается сокет, и множество протоколов, которые используются для передачи данных. 
Чаще других используются домены Unix и Internet, задаваемые константами AF_UNIX и AF_INET соответственно (префикс AF означает "address family" - "семейство адресов"). 
При задании AF_UNIX для передачи данных используется файловая система ввода/вывода Unix. 
В этом случае сокеты используются для межпроцессного взаимодействия на одном компьютере и не годятся для работы по сети. 
Константа AF_INET соответствует Internet-домену.
Сокеты, размещённые в этом домене, могут использоваться для работы в любой IP-сети.
Существуют и другие домены: 

Name                Purpose                          Man page
AF_UNIX, AF_LOCAL   Local communication              unix(7)
AF_INET             IPv4 Internet protocols          ip(7)
AF_INET6            IPv6 Internet protocols          ipv6(7)
AF_IPX              IPX - Novell protocols
AF_NETLINK          Kernel user interface device     netlink(7)
AF_X25              ITU-T X.25 / ISO-8208 protocol   x25(7)
AF_AX25             Amateur radio AX.25 protocol
AF_ATMPVC           Access to raw ATM PVCs
AF_APPLETALK        Appletalk                        ddp(7)
AF_PACKET           Low level packet interface       packet(7)

Тип сокета определяет способ передачи данных по сети. Чаще других применяются:
	SOCK_STREAM. Передача потока данных с предварительной установкой соединения. 
	Обеспечивается надёжный канал передачи данных, при котором фрагменты отправленного блока не теряются, 
	не переупорядочиваются и не дублируются. 
	Этот тип сокетов является самым распространённым.
	
	SOCK_DGRAM. Передача данных в виде отдельных сообщений (датаграмм). 
	Предварительная установка соединения не требуется. 
	Обмен данными происходит быстрее, но является ненадёжным: сообщения могут теряться в пути, дублироваться и переупорядочиваться. 
	Допускается передача сообщения нескольким получателям (multicasting) и широковещательная передача (broadcasting).
	
	SOCK_RAW. Этот тип присваивается низкоуровневым (т. н. "сырым") сокетам. 
	Их отличие от обычных сокетов состоит в том, что с их помощью программа может взять на себя формирование некоторых заголовков, 
	добавляемых к сообщению.

Обратите внимание, что не все домены допускают задание произвольного типа сокета. 
Например, совместно с доменом Unix используется только тип SOCK_STREAM. 
С другой стороны, для Internet-домена можно задавать любой из перечисленных типов. 
В этом случае для реализации SOCK_STREAM используется протокол TCP, для реализации SOCK_DGRAM - протокол UDP, 
а тип SOCK_RAW используется для низкоуровневой работы с протоколами IP, ICMP и т. д.

Последний атрибут protocol определяет протокол, используемый для передачи данных. 
Часто протокол однозначно определяется по домену и типу сокета. 
В этом случае в качестве третьего параметра функции socket можно передать 0, что соответствует протоколу по умолчанию. 
Тем не менее, иногда (например, при работе с низкоуровневыми сокетами) требуется задать протокол явно. 
Числовые идентификаторы протоколов зависят от выбранного домена, их можно найти в документации.

Прежде чем передавать данные через сокет, его необходимо связать с адресом в выбранном домене. 
Вид адреса зависит от выбранного домена. В Unix-домене это текстовая строка - имя файла, через который происходит обмен данными. 
В Internet-домене адрес задаётся комбинацией IP-адреса и 16-битного номера порта. 
IP-адрес определяет хост в сети, а порт - конкретный сокет на этом хосте.

Протоколы TCP и UDP используют различные пространства портов.
Для явного связывания сокета с некоторым адресом используется функция bind. Её прототип имеет вид:
	#include <sys/types.h>
	#include <sys/socket.h>
	int bind(int sockfd, struct sockaddr *addr, int addrlen);

В качестве первого параметра передаётся дескриптор сокета, который необходимо привязать к заданному адресу. 
Второй параметр, addr, содержит указатель на структуру с адресом, а третий - длину этой структуры: 
	struct sockaddr {
		unsigned short sa_family; // Семейство адресов, AF_xxx
		char sa_data[14];  // 14 байтов для хранения адреса
	};

Поле sa_family содержит идентификатор домена, тот же, что и первый параметр функции socket. 
В зависимости от значения этого поля по-разному интерпретируется содержимое массива sa_data. 
Работать с этим массивом напрямую не очень удобно, поэтому можно использовать вместо sockaddr одну из альтернативных структур вида sockaddr_XX (XX - суффикс, обозначающий домен: "un" - Unix, "in" - Internet и т. д.). 
При передаче в функцию bind указатель на эту структуру приводится к указателю на sockaddr.
Рассмотрим для примера структуру sockaddr_in.
	struct sockaddr_in {
		short int          sin_family;  // Семейство адресов
		unsigned short int sin_port;    // Номер порта
		struct in_addr     sin_addr;    // IP-адрес
		unsigned char      sin_zero[8]; // "Дополнение" до размера структуры sockaddr
};

Здесь поле sin_family соответствует полю sa_family в sockaddr, в sin_port записывается номер порта, а в sin_addr - IP-адрес хоста. 
Поле sin_addr само является структурой, которая имеет вид:
	struct in_addr {
	    unsigned long s_addr;
	};
Зачем понадобилось заключать всего одно поле в структуру? 
Дело в том, что раньше in_addr представляла собой объединение (union), содержащее гораздо большее число полей. 
Сейчас, когда в ней осталось всего одно поле, она продолжает использоваться для обратной совместимости.

Существует два порядка хранения байтов в слове и двойном слове. 
Один из них называется порядком хоста (host byte order), 
другой - сетевым порядком (network byte order) хранения байтов. 
При указании IP-адреса и номера порта необходимо преобразовать число из порядка хоста в сетевой. 
Для этого используются функции htons (Host TO Network Short) и htonl (Host TO Network Long). 
Обратное преобразование выполняют функции ntohs и ntohl.

На некоторых машинах (к PC это не относится) порядок хоста и сетевой порядок хранения байтов совпадают. 
Тем не менее, функции преобразования лучше применять и там, поскольку это улучшит переносимость программы.

УСТАНОВКА СОЕДИНЕНИЯ (СЕРВЕР). 
Установка соединения на стороне сервера состоит из четырёх этапов, ни один из которых не может быть опущен. 
Сначала сокет создаётся (socket) и привязывается(bind) к локальному адресу. 
Если компьютер имеет несколько сетевых интерфейсов с различными IP-адресами, можно принимать соединения только с одного из них, передав его адрес функции bind. 
Если же необходимо соединяться с клиентами через любой интерфейс, з в качестве адреса адается константа INADDR_ANY.
	serv_addr.sin_addr.s_addr = INADDR_ANY;

Что касается номера порта, можно задать конкретный номер или 0 (в этом случае система сама выберет произвольный неиспользуемый в данный момент номер порта).

На следующем шаге создаётся очередь запросов на соединение. 
При этом сокет переводится в режим ожидания запросов со стороны клиентов. Всё это выполняет функция listen:
	// ожидание подключений, размер очереди - 5
	listen(sockfd,5);

Первый параметр - дескриптор сокета, а второй задаёт размер очереди запросов. 
Каждый раз, когда очередной клиент пытается соединиться с сервером, его запрос ставится в очередь, так как сервер может быть занят обработкой других запросов. 
Если очередь заполнена, все последующие запросы будут игнорироваться.
Когда сервер готов обслужить очередной запрос, он использует функцию accept:
	newsockfd = accept(sockfd, (struct sockaddr *) &cli_addr, &clilen);

Функция accept создаёт для общения с клиентом новый сокет и возвращает его дескриптор в переменную newsockfd типа int. 
Параметр sockfd задаёт слушающий сокет. 
После вызова он остаётся в слушающем состоянии и может принимать другие соединения. 
В структуру, на которую ссылается cli_addr, записывается адрес сокета клиента, который установил соединение с сервером. 
В переменную, адресуемую указателем clilen, изначально записывается размер структуры; функция accept записывает туда длину, которая реально была использована. 
Если адрес клиента не интересует, можно просто передать NULL в качестве второго и третьего  параметров.

УСТАНОВКА СОЕДИНЕНИЯ (КЛИЕНТ). 
На стороне клиента для установления соединения используется функция connect.
	connect(sockfd,(struct sockaddr *) &serv_addr, sizeof(serv_addr))

Здесь sockfd - сокет, который будет использоваться для обмена данными с сервером, serv_addr содержит указатель на структуру с адресом сервера, а addrlen - длину этой структуры.
Обмен данными. Для обмена данными используются функции send и recv.
В Unix для работы с сокетами можно использовать также файловые функции read и write, но они обладают меньшими возможностями,
а кроме того не будут работать на других платформах (например, под Windows).
Функция send используется для отправки данных и имеет следующий прототип.
	int send(int sockfd, const void *msg, int len, int flags);

Здесь sockfd - это дескриптор сокета, через который отправляются данные, msg - указатель на буфер с данными, len - длина буфера в байтах, а flags - набор битовых флагов, управляющих работой функции (если флаги не используются, передается 0).
Флаг MSG_OOB используется для приёма срочных данных, а MSG_DONTROUTE запрещает маршрутизацию пакетов. 
Нижележащие транспортные слои могут проигнорировать флаг MSG_DONTROUTE.
Функция send возвращает число байтов, которое на самом деле было отправлено (или -1 в случае ошибки).
Для чтения данных из сокета используется функция recv.
	int recv(int sockfd, void *buf, int len, int flags);

В целом её использование аналогично send. Она точно так же принимает дескриптор сокета, указатель на буфер и набор флагов. 
Флаг MSG_OOB используется для приёма срочных данных, а MSG_PEEK заставляет функцию recv просматривать данные вместо их чтения.
Закрытие сокета. По окончанию обмена данными, сокет закрывается с помощью функции close. Это приведёт к разрыву соединения.
	#include <unistd.h>
	int close(int fd);

Также возможно запретить передачу данных в каком-то одном направлении, используя shutdown.
	int shutdown(int sockfd, int how);

Параметр how может принимать одно из следующих значений:
0 - запретить чтение из сокета;
1 - запретить запись в сокет;
2 - запретить и то и другое.
Хотя после вызова shutdown с параметром how, равным 2, уже нельзя использовать сокет для обмена данными, всё равно потребуется вызвать close, чтобы освободить связанные с ним системные ресурсы.
Обработка ошибок. Если что-то пошло не так, все рассмотренные функции возвращают -1, записывая в глобальную переменную errno код ошибки. 
Примеры применения сокетов, реализующие клиент-серверную систему с использованием протоколов TCP и UDP, доступны по адресу http://gun.cs.nstu.ru/ssw/Linsockets.

3. МЕТОДИЧЕСКИЕ УКАЗАНИЯ. 
3.1. Для отладки приложения рекомендуется запускать клиент и сервер на одной машине.
3.2. Для отладки рекомендуется использовать отладчик gdb, информацию котором можно получить инструкцией man gdb.
3.3. Выбор протокола передачи данных определяется вариантом задания.
3.4. Для нормального выполнения сетевых соединений между компьютерами требуется соответствующая настройка межсетевых экранов.

4. ПОРЯДОК ВЫПОЛНЕНИЯ РАБОТЫ. 
4.1. Написать и отладить функцию, реализующую сервер, получающий и обрабатывающий запросы от клиентов (аналог родительского приложения).
4.2. Написать и отладить программу, реализующую клиентский процесс (аналог дочернего процесса), запрашивающий у сервера исходные данные, выполняющий вычисления (действия) в соответствии с вариантом, и возвращающий серверу результаты вычислений.

5. ВАРИАНТЫ ЗАДАНИЙ. 
См. варианты заданий в файле variants.txt.
Для нечетных вариантов используется протокол TCP, для четных – UDP.
?===============?

6. КОНТРОЛЬНЫЕ ВОПРОСЫ. 
1. Что такое сокет?
2. Чем отличаются сокеты Windows и Unix?
3. Для чего используется AF_Unix?
4. Какие этапы работы с сокетами в клиентской части приложения вы знаете?
5. Какие этапы работы с сокетами в серверной части приложения вы знаете?
6. Какие функции реализуют отправку и получение сообщений в дейтаграммном режиме?
7. Какие функции реализуют отправку и получение сообщений в потоковом режиме?
8. Какие библиотеки для работы с сокетами вы знаете и как их следует подключать?

!===============!
СОСТАВИТЕЛИ:
Гунько А.В., канд. техн. наук, доц. НГТУ
Чистяков Н.А., инженер НГТУ
!===============!

!===============!
ССЫЛКИ:
http://gun.cs.nstu.ru/ssw/13_Linsock.pps
http://gun.cs.nstu.ru/ssw/Linsockets/
http://cs.baylor.edu/~donahoo/practical/CSockets/textcode.html
http://cs.baylor.edu/~donahoo/practical/CSockets2/textcode.html
https://rsdn.org/article/unix/sockets.xml
http://www.binarytides.com/raw-sockets-c-code-linux/
http://masandilov.ru/network/guide_to_network_programming
http://www.iitg.ac.in/scifac/cep/public_html/events/Fun_With_Sockets.pdf
https://www.codeproject.com/articles/586000/networking-and-socket-programming-tutorial-in-c
http://www.pdbuchan.com/rawsock/rawsock.html
https://habrahabr.ru/post/183316/
https://habrahabr.ru/company/smart_soft/blog/184430/
http://citforum.ru/programming/unix/sockets/
https://www.linux.org.ru/forum/development/10072313
http://www.tenouk.com/Module41c.html
!===============!
